/**
 * 简化版Luckysheet表格组件
 * 用于替换SpreadJS
 */
class LuckySheetTable {
    constructor(container, options = {}) {
        this.container = typeof container === 'string' ? document.getElementById(container) : container;
        this.options = {
            sheetCount: options.sheetCount || 1,
            ...options
        };
        this.data = [];
        this.filteredData = [];
        this.currentView = null;
        this.statusBar = null;
        this.dataManager = null;
        this.init();
    }

    init() {
        this.container.innerHTML = '';
        this.container.className = 'luckysheet-container';
        
        // 创建工具栏
        this.createToolbar();
        
        // 创建表格容器
        this.tableContainer = document.createElement('div');
        this.tableContainer.style.height = 'calc(100% - 60px)';
        this.tableContainer.style.overflow = 'auto';
        this.container.appendChild(this.tableContainer);
    }

    createToolbar() {
        this.toolbar = document.createElement('div');
        this.toolbar.className = 'luckysheet-toolbar';
        this.container.appendChild(this.toolbar);
    }

    // 模拟SpreadJS的API
    addSheetTab(index, name, sheetType) {
        return new LuckySheet(this, name);
    }

    getActiveSheetTab() {
        return this.activeSheet || new LuckySheet(this, 'default');
    }

    // 数据管理器
    dataManager() {
        if (!this.dataManager) {
            this.dataManager = new LuckyDataManager();
        }
        return this.dataManager;
    }

    suspendPaint() {
        // 暂停渲染
    }

    resumePaint() {
        // 恢复渲染
    }

    toJSON(options = {}) {
        return {
            sheets: [{
                name: 'Sheet1',
                data: this.data
            }]
        };
    }

    refresh() {
        if (this.activeSheet) {
            this.activeSheet.render();
        }
    }

    // 设置选项
    set options(opts) {
        this._options = { ...this._options, ...opts };
    }

    get options() {
        return this._options || {};
    }
}

class LuckySheet {
    constructor(workbook, name) {
        this.workbook = workbook;
        this.name = name;
        this.dataView = null;
        this.pinnedColumns = [];
        this.workbook.activeSheet = this;
    }

    setDataView(view) {
        this.dataView = view;
        this.render();
    }

    render() {
        if (!this.dataView || !this.dataView.data) return;

        const table = document.createElement('table');
        table.className = 'luckysheet-table';
        table.style.width = '100%';
        table.style.borderCollapse = 'collapse';
        
        // 创建表头
        if (this.dataView.columns && this.dataView.columns.length > 0) {
            const thead = document.createElement('thead');
            const headerRow = document.createElement('tr');
            
            this.dataView.columns.forEach((col, index) => {
                const th = document.createElement('th');
                th.className = 'luckysheet-cell luckysheet-header';
                th.textContent = col.label || col.field;
                th.style.minWidth = (col.width || 100) + 'px';
                th.style.padding = '8px';
                th.style.border = '1px solid #d0d0d0';
                th.style.backgroundColor = '#f5f5f5';
                th.style.fontWeight = 'bold';
                th.style.textAlign = 'center';
                
                // 固定列样式
                if (this.pinnedColumns.includes(index)) {
                    th.style.position = 'sticky';
                    th.style.left = (index * (col.width || 100)) + 'px';
                    th.style.backgroundColor = '#e9ecef';
                    th.style.zIndex = '11';
                }
                
                headerRow.appendChild(th);
            });
            
            thead.appendChild(headerRow);
            table.appendChild(thead);
        }

        // 创建表体
        const tbody = document.createElement('tbody');
        this.dataView.filteredData.forEach((row, rowIndex) => {
            const tr = document.createElement('tr');
            tr.style.cursor = 'pointer';
            
            // 鼠标悬停效果
            tr.onmouseenter = () => {
                tr.style.backgroundColor = '#f8f9fa';
            };
            tr.onmouseleave = () => {
                tr.style.backgroundColor = '';
            };
            
            if (this.dataView.columns) {
                this.dataView.columns.forEach((col, colIndex) => {
                    const td = document.createElement('td');
                    td.className = 'luckysheet-cell';
                    td.style.padding = '6px 8px';
                    td.style.border = '1px solid #d0d0d0';
                    td.style.verticalAlign = 'middle';
                    
                    let value = row[col.field] || '';
                    
                    // 处理超链接
                    if (col.style && col.style.cellType && col.style.cellType.clickCallback) {
                        const link = document.createElement('a');
                        link.href = '#';
                        link.textContent = value;
                        link.style.color = '#007bff';
                        link.style.textDecoration = 'none';
                        link.onclick = (e) => {
                            e.preventDefault();
                            col.style.cellType.clickCallback({ row: rowIndex });
                        };
                        td.appendChild(link);
                    } else {
                        // 格式化数值
                        if (typeof value === 'number') {
                            if (col.field.includes('price') || col.field.includes('change')) {
                                td.textContent = value.toFixed(2);
                                td.style.textAlign = 'right';
                            } else {
                                td.textContent = value;
                            }
                        } else {
                            td.textContent = value;
                        }
                    }
                    
                    // 固定列样式
                    if (this.pinnedColumns.includes(colIndex)) {
                        td.style.position = 'sticky';
                        td.style.left = (colIndex * (col.width || 100)) + 'px';
                        td.style.backgroundColor = '#f8f9fa';
                        td.style.zIndex = '10';
                    }
                    
                    tr.appendChild(td);
                });
            }
            
            tbody.appendChild(tr);
        });
        
        table.appendChild(tbody);
        
        // 清空并添加表格
        this.workbook.tableContainer.innerHTML = '';
        this.workbook.tableContainer.appendChild(table);
    }

    togglePinnedColumns(columns) {
        this.pinnedColumns = columns;
        this.render();
    }

    getSheet() {
        return {
            getValue: (row, col) => {
                if (this.dataView && this.dataView.data[row] && this.dataView.columns[col]) {
                    return this.dataView.data[row][this.dataView.columns[col].field];
                }
                return null;
            },
            rowFilter: () => ({
                reset: () => {
                    if (this.dataView) {
                        this.dataView.clearFilter();
                    }
                }
            })
        };
    }

    applyTableTheme(theme) {
        // 应用主题
    }

    setDefaultRowHeight(height, area) {
        // 设置默认行高
    }

    // 设置选项
    set options(opts) {
        this._options = { ...this._options, ...opts };
    }

    get options() {
        return this._options || {};
    }
}

class LuckyDataManager {
    constructor() {
        this.tables = {};
    }

    addTable(name, config) {
        const table = new LuckyTable(name, config);
        this.tables[name] = table;
        return table;
    }
}

class LuckyTable {
    constructor(name, config) {
        this.name = name;
        this.config = config;
        this.views = {};
    }

    addView(name, columns) {
        const view = new LuckyTableView(name, columns, this.config);
        this.views[name] = view;
        return view;
    }
}

class LuckyTableView {
    constructor(name, columns, config) {
        this.name = name;
        this.columns = columns;
        this.config = config;
        this.data = [];
        this.filteredData = [];
        this.isFiltered = false;
    }

    async fetch() {
        if (this.config.remote && this.config.remote.read) {
            try {
                const response = await fetch(this.config.remote.read.url);
                const data = await response.json();
                this.data = data;
                this.filteredData = [...data];
                return Promise.resolve();
            } catch (error) {
                console.error('Error fetching data:', error);
                return Promise.reject(error);
            }
        }
        return Promise.resolve();
    }

    length() {
        return this.data.length;
    }

    visibleLength() {
        return this.filteredData.length;
    }

    clearFilter() {
        this.filteredData = [...this.data];
        this.isFiltered = false;
        if (this.onFilterChanged) {
            this.onFilterChanged();
        }
    }

    filter(predicate) {
        this.filteredData = this.data.filter(predicate);
        this.isFiltered = true;
        if (this.onFilterChanged) {
            this.onFilterChanged();
        }
    }
}

// Excel导出功能
class LuckyExcelIO {
    save(data, successCallback, errorCallback) {
        try {
            // 简化的Excel导出逻辑
            const csvContent = this.convertToCSV(data);
            const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
            successCallback(blob);
        } catch (error) {
            if (errorCallback) errorCallback(error);
        }
    }

    convertToCSV(data) {
        if (!data.sheets || !data.sheets[0] || !data.sheets[0].data) {
            return '';
        }

        const rows = data.sheets[0].data;
        return rows.map(row => {
            return Object.values(row).map(value => {
                if (typeof value === 'string' && value.includes(',')) {
                    return `"${value}"`;
                }
                return value;
            }).join(',');
        }).join('\n');
    }
}

// 全局对象，模拟SpreadJS的命名空间
window.GC = {
    Spread: {
        Sheets: {
            Workbook: LuckySheetTable,
            SheetType: {
                tableSheet: 'tableSheet'
            },
            SheetArea: {
                colHeader: 'colHeader'
            },
            Events: {
                SelectionChanged: 'selectionChanged',
                RangeFiltered: 'rangeFiltered',
                RangeFilterCleared: 'rangeFilterCleared'
            },
            CellTypes: {
                HyperLink: function() {
                    return {
                        onClickAction: function(callback) {
                            this.clickCallback = callback;
                            return this;
                        }
                    };
                }
            },
            Style: function() {
                return {};
            },
            StatusBar: {
                StatusBar: function(container, options) {
                    this.container = container;
                    this.options = options;
                    this.items = {};
                    
                    this.bind = (workbook) => {
                        this.workbook = workbook;
                    };
                    
                    this.get = (name) => {
                        return this.items[name];
                    };
                    
                    // 添加状态栏项目
                    if (options.items) {
                        options.items.forEach(item => {
                            this.items[item.name] = item;
                        });
                    }
                    
                    return this;
                },
                StatusItem: function(name, options) {
                    this.name = name;
                    this.options = options;
                    this.onUpdate = () => {};
                    return this;
                }
            },
            Tables: {
                TableThemes: {
                    light18: 'light18'
                }
            }
        },
        Excel: {
            IO: LuckyExcelIO
        }
    }
};

// 工具函数
window.GC.Spread.Sheets.findControl = function(element) {
    return element.luckysheetInstance;
};

// 保存实例到元素上
document.addEventListener('DOMContentLoaded', function() {
    // 如果有自动初始化的需求可以在这里处理
});
